#!/usr/bin/env python3

#
# Usage:
#
#         Bookmarked commands !
#
#         Register and execute commands
#
#         Examples:
#         $ bcomm help
#         $ cd project && bcomm register "npm run compile-watch"
#         $ cd sub-project && bcomm register "gulp watch"
#         $ cd sub-sub-project && bcomm register "npm run compile-watch" category1
#         $ bcomm show
#         $ bcomm run
#         $ bcomm run 0
#         $ bcomm run 0 1
#         $ bcomm run category1
#         $ bcomm remove 1
#         $ bcomm clean-all
#
#

import fcntl
import json
import os
import random
import re
import sys
import time
from subprocess import *

# File were list of command is persisted
home = os.path.expanduser("~")
COMMAND_LIST_PATH = os.path.join(home, '.bookmarked_commands')
ENCODING = 'utf-8'

# Display parameters, length of prefix
WORKING_DIR_LEN = 40
SHELL_COMMAND_LEN = 25


class TermStyle():
    HEADER = '\033[95m'
    BLUE = '\033[94m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    RED = '\033[91m'
    CYAN = "\033[1;36m"
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'
    RESET = '\033[0m'


class Utils():
    @staticmethod
    def log(message='', data=None, termStyle=TermStyle.GREEN):
        print(Utils.colorize(message, termStyle=termStyle))
        if data:
            print(data)

    @classmethod
    def error(self, message, data=None):
        Utils.log(message, data=data, termStyle=TermStyle.RED)

    @staticmethod
    def colorize(message, termStyle=TermStyle.GREEN):
        return termStyle + str(message) + TermStyle.RESET

    @staticmethod
    def normalize(str, maxLen):
        if len(str) > maxLen:
            start = len(str) - maxLen + 3
            str = '...' + str[start:len(str)]
        if len(str) < maxLen:
            blank = ''
            while len(blank) + len(str) < maxLen:
                blank += ' '
            str = blank + str
        return str

    @staticmethod
    def nonBlockReadStream(stream):
        fd = stream.fileno()
        fl = fcntl.fcntl(fd, fcntl.F_GETFL)
        fcntl.fcntl(fd, fcntl.F_SETFL, fl | os.O_NONBLOCK)
        try:
            return stream.read()
        except:
            return None


commandCounter = 0


class Command():
    def __init__(self, shellCommand, workingDir, category=None):
        global commandCounter
        commandCounter = commandCounter + 1
        self.id = commandCounter
        self.color = random.choice([TermStyle.BLUE, TermStyle.CYAN, TermStyle.YELLOW, TermStyle.GREEN])
        self.shellCommand = shellCommand
        self.workingDir = workingDir
        self.category = category
        self.process = None

    @staticmethod
    def fromList(list):
        return Command(list[0], list[1], list[2])

    def toList(self):
        return [self.shellCommand, self.workingDir, self.category]

    def execute(self):
        self.log('Starting command: ' + self.shellCommand)
        self.process = Popen(self.shellCommand, shell=True, cwd=self.workingDir, stderr=PIPE, stdout=PIPE)

    def isAlive(self):
        return self.process is not None and self.process.poll() is None

    def kill(self):
        if self.isAlive():
            self.log('Command was alive, killing it: ' + self.shellCommand)
            self.process.kill()
        else:
            self.log('Command was not alive: ' + self.shellCommand)

    def printOutput(self):
        if self.process is None:
            return

        stdout = self.process.stdout
        if stdout is not None:
            out = Utils.nonBlockReadStream(stdout)
            if out is not None:
                for line in out.decode(ENCODING).rstrip().splitlines():
                    self.log(line, termStyle=self.color)

        stderr = self.process.stderr
        if stderr is not None:
            out = Utils.nonBlockReadStream(stderr)
            if out is not None:
                for line in out.decode(ENCODING).rstrip().splitlines():
                    self.log(line, termStyle=TermStyle.RED)

    def log(self, message, termStyle=TermStyle.GREEN):
        if len(message) > 0:
            prefix = self.getLogPrefix()
            Utils.log(Utils.colorize('[ ' + prefix + ' ]: ', termStyle=termStyle) + message)

    def getLogPrefix(self):
        nWorkingDir = Utils.normalize(self.workingDir, WORKING_DIR_LEN)
        nShellCommand = Utils.normalize(self.shellCommand, SHELL_COMMAND_LEN)
        prefix = str(self.id) + ' ' + nWorkingDir + ': ' + nShellCommand
        return prefix

    def printCommand(self):
        categoryStr = 'default'
        if self.category is not None:
            categoryStr = self.category
        prefix = Utils.colorize('[' + str(self.id) + '] [ ' + categoryStr + ' ] ' + self.workingDir + ': ')
        Utils.log(prefix + self.shellCommand)


class ActionHandlers:
    def __init__(self):
        self.commandList = []

    def showHelp(self):
        Utils.log('Register and execute commands')
        Utils.log('')
        Utils.log('Examples: ')
        Utils.log('\t$ bcomm help')
        Utils.log('\t$ cd project && bcomm register "npm run compile-watch"')
        Utils.log('\t$ cd project && bcomm register "npm run gulp-watch"')
        Utils.log('\t$ cd project && bcomm register "npm run gulp-watch" category1')
        Utils.log('\t$ bcomm show')
        Utils.log('\t$ bcomm run')
        Utils.log('\t$ bcomm run 0')
        Utils.log('\t$ bcomm run 0 1')
        Utils.log('\t$ bcomm run category1')
        Utils.log('\t$ bcomm remove 1')
        Utils.log('\t$ bcomm clean-all')

    def registerCommand(self, shellCommand, workingDir, category):
        command = Command(shellCommand, workingDir, category)
        self.commandList.append(command)

    def displayCommands(self):
        if len(self.commandList) > 0:
            Utils.log('Registered commands: ')
            Utils.log()
            for i, com in enumerate(self.commandList):
                com.printCommand()
        else:
            Utils.log('No command registered yet !')

    def persistCommands(self):
        rawList = []
        for command in self.commandList:
            rawList.append(command.toList())

        with open(COMMAND_LIST_PATH, 'w') as outfile:
            json.dump(rawList, outfile, indent=4, sort_keys=True)

    def loadCommands(self):
        try:
            with open(COMMAND_LIST_PATH, 'r') as infile:
                rawList = json.load(infile)
                self.commandList = []
                for item in rawList:
                    self.commandList.append(Command.fromList(item))

        except Exception as e:
            Utils.log('Command list file not found: ', e, TermStyle.YELLOW)
            self.commandList = []

    def cleanAllCommands(self):
        self.commandList = []

    def cleanCommand(self, commandId):
        com = self.getCommandById(commandId)
        self.commandList.remove(com)

    def getCommandById(self, commandId):
        for com in self.commandList:
            if com.id == commandId:
                return com
        return None

    def exit(self, code=0):
        keepAlive = self.isCommandsAlive()
        while keepAlive:
            try:
                keepAlive = self.isCommandsAlive()
                self.printCommandsOutput()
                time.sleep(0.2)
            except (KeyboardInterrupt, SystemExit):
                Utils.log()
                Utils.log()
                Utils.log('Stopping commands ...', termStyle=TermStyle.YELLOW)
                Utils.log()
                for com in self.commandList:
                    com.kill()
        exit(code)

    def printCommandsOutput(self):
        for com in self.commandList:
            com.printOutput()

    def executeCommandIdsList(self, commandIds):
        for comId in commandIds:
            self.commandList[int(comId)].execute()

    def executeCategory(self, commandCategory):
        for com in self.commandList:
            if com.category == commandCategory:
                com.execute()

    def executeAll(self):
        for com in self.commandList:
            com.execute()

    def isCommandsAlive(self):
        if len(self.commandList) == 0:
            return False
        for com in self.commandList:
            if com.isAlive():
                return True
        return False

    def categorize(self, commandId, category):
        self.getCommandById(commandId).category = category


class ArgParser:
    def __init__(self):
        self.actions = ActionHandlers()
        self.actions.loadCommands()

    def processArgs(self, args):
        cleanArgs = self.cleanArgs(args)

        # print(cleanArgs)

        if len(cleanArgs) < 2:
            self.actions.showHelp()
            self.actions.exit(1)

        if cleanArgs[1] == 'help':
            self.actions.showHelp()
            self.actions.exit()

        if cleanArgs[1] == 'show':
            self.actions.displayCommands()
            self.actions.exit()

        if cleanArgs[1] == 'register':

            if len(cleanArgs) < 3:
                Utils.error('You must specify a command to register.')
                self.actions.exit(1)
            shellCommand = cleanArgs[2]

            category = None
            if len(cleanArgs) > 3:
                category = cleanArgs[3]

            workingDir = os.getcwd()
            self.actions.registerCommand(shellCommand, workingDir, category)
            self.actions.persistCommands()

            Utils.log('Command registered.')
            Utils.log()

            self.actions.displayCommands()
            self.actions.exit()

        if cleanArgs[1] == 'clean-all':
            self.actions.cleanAllCommands()
            self.actions.persistCommands()

            Utils.log('All commands cleaned !')
            Utils.log()

            self.actions.exit()

        if cleanArgs[1] == 'remove' and len(cleanArgs) > 2:

            commandIds = cleanArgs[2:]
            removed = []
            for cmdId in commandIds:
                com = self.actions.getCommandById(int(cmdId))
                if com is None:
                    Utils.error('Command not found: ' + cmdId)
                else:
                    removed.append(cmdId)
                    self.actions.cleanCommand(int(cmdId))
            self.actions.persistCommands()

            if len(removed) > 0:
                Utils.log('Commands cleaned: ' + str(removed))
                Utils.log()

                self.actions.exit()

            else:
                self.actions.exit(1)

        if cleanArgs[1] == 'categorize':
            if len(cleanArgs) < 3:
                Utils.error('You must specify a command id and a category.')
                self.actions.exit(1)

            commandId = int(cleanArgs[2])
            category = cleanArgs[3]
            self.actions.categorize(commandId, category)
            self.actions.persistCommands()

            Utils.log('Command categorized.')
            Utils.log()

            self.actions.displayCommands()
            self.actions.exit()

        if cleanArgs[1] == 'run' and len(cleanArgs) == 2:

            Utils.log('Starting all commands')
            Utils.log()

            if len(self.actions.commandList) > 0:
                self.actions.executeAll()
                self.actions.exit()
            else:
                Utils.log('No command to run', termStyle=TermStyle.YELLOW)
                self.actions.exit(1)

        if cleanArgs[1] == 'run' and len(cleanArgs) > 2:

            pattern = re.compile('[a-zA-Z]+')
            if pattern.match(cleanArgs[2]):
                commandCategory = cleanArgs[2]
                Utils.log('Starting category: ' + commandCategory)
                Utils.log()

                self.actions.executeCategory(commandCategory)
                self.actions.exit()

            else:
                Utils.log('Starting commands: ' + str(commandIds))
                Utils.log()

                self.actions.executeCommandIdsList(commandIds)
                self.actions.exit()

        Utils.error('Bad command.')
        Utils.log()
        self.actions.showHelp()
        self.actions.exit(1)

    def cleanArgs(self, arguments):
        res = []
        for arg in arguments:
            res.append(arg.strip())
        return res


if __name__ == '__main__':
    Utils.log('Bookmarked commands !')
    Utils.log()

    argParser = ArgParser()
    argParser.processArgs(sys.argv)
