#!/usr/bin/python3
# encoding: utf-8

import argparse
import os
import re
import subprocess
from argparse import RawTextHelpFormatter

PGRM_DESC = '''
Simple utility used to initialize lot of SSH connection by removing eventual old keys 
and adding distant keys.

Usage: initiliaze-ssh-connections -p file.txt 

** File example:

10.0.2.201  ubuntu16-k3-master1.kubernetes    user    password    ~/.ssh/id_rsa.pub
10.0.2.211  ubuntu16-k3-node1.kubernetes      user    password    ~/.ssh/id_rsa.pub
10.0.2.212  ubuntu16-k3-node2.kubernetes      user    password    ~/.ssh/id_rsa.pub
10.0.2.213  ubuntu16-k3-node3.kubernetes      user    password    ~/.ssh/id_rsa.pub

** You can skip hostname steps:

10.0.2.213  ##no-hostname##                   user    password    ~/.ssh/id_rsa.pub
10.0.2.214  ##no-hostname##                   user    password    ~/.ssh/id_rsa.pub
10.0.2.215  ##no-hostname##                   user    password    ~/.ssh/id_rsa.pub

** And you can skip key send steps:

10.0.2.213  ubuntu16-k3-node3.kubernetes      user    password    ##no-send-key##    
10.0.2.214  ubuntu16-k3-node3.kubernetes      user    password    ##no-send-key##    
10.0.2.215  ubuntu16-k3-node3.kubernetes      user    password    ##no-send-key##    

'''


class Colors:
    PURPLE = '\033[95m'
    BLUE = '\033[94m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    RED = '\033[91m'
    ENDC = '\033[0m'
    UNDERLINE = '\033[4m'


class Logger:

    @staticmethod
    def header(line=""):
        Logger.printColor(line, Colors.UNDERLINE + Colors.BLUE)

    @staticmethod
    def success(line=""):
        Logger.printColor(line, Colors.GREEN)

    @staticmethod
    def info(line=""):
        Logger.printColor(line)

    @staticmethod
    def warning(line=""):
        Logger.printColor(line, Colors.YELLOW)

    @staticmethod
    def error(line=""):
        Logger.printColor(line, Colors.RED)

    @staticmethod
    def printColor(line="", color=Colors.ENDC):
        Logger.print(color + str(line) + Colors.ENDC)

    @staticmethod
    def print(line=""):
        print(line)


def shellCommand(command: str, displayOutput=True) -> None:
    if displayOutput:
        stdout = None
        stderr = None
    else:
        stdout = subprocess.PIPE
        stderr = subprocess.PIPE

    completedProcess = subprocess.run(command, shell=True, stdout=stdout, stderr=stderr)
    if completedProcess.returncode is not 0:
        raise Exception('Error: ' + str(completedProcess.stderr))


def removeOldKnownHost(serverId: str) -> bool:
    try:
        shellCommand("ssh-keygen -R " + serverId)
        Logger.success("Known host removed: " + serverId)
        return True
    except:
        Logger.warning("Known host not removed: " + serverId)
        return False


def scanRemotePublicIdAndAdd(serverId: str) -> bool:
    try:
        shellCommand("ssh-keyscan -H " + serverId + " >> ~/.ssh/known_hosts")
        Logger.success("Known host added: " + serverId)
        return True
    except:
        Logger.error("Known host not added: " + serverId)
        return False


def sendKeyToRemote(user: str, password: str, serverId: str, identityFile: str) -> bool:
    try:
        cmd = "sshpass -p " + password + " ssh-copy-id -o PubkeyAuthentication=no -i " + identityFile + " " + user + "@" + serverId
        shellCommand(cmd)
        Logger.success("Key sent: " + serverId)
        return True
    except:
        Logger.error("Key not sent: " + serverId)
        return False


def processHostsFile(path):
    errors = 0
    success = 0
    warnings = 0

    with open(path, "r") as inFile:

        i = 0

        lines = inFile.readlines()
        for l in lines:

            if re.match("\S+", l) is None:
                Logger.warning("Skipping empty line")
                continue

            if re.match("^#.*", l) is not None:
                Logger.warning("Skipping comment line")
                continue

            matcher = re.match("^\s*([0-9\.]+)\s+(\S+)\s+(\S+)\s+(\S+)(?:(?:\s+)+(\S+))?", l)

            if matcher == None or len(matcher.groups()) < 4:
                Logger.warning("Skipping line, invalid format: " + l)
                warnings += 1
                continue

            ip = matcher.group(1)
            hostname = matcher.group(2)
            user = matcher.group(3)
            password = matcher.group(4)
            identityFile = None
            if len(matcher.groups()) > 4:
                identityFile = matcher.group(5)

            if hostname == "##no-hostname##":
                hostname = None

            Logger.info()
            Logger.header("Processing line " + str(i) + ": ip=" + ip + " hostname=" + str(hostname) + " pwd=" + password
                        + " identityFile=" + str(identityFile))
            Logger.info()

            if removeOldKnownHost(ip):
                success += 1
            else:
                warnings += 1

            if hostname is not None and removeOldKnownHost(hostname):
                success += 1
            elif hostname:
                warnings += 1

            if scanRemotePublicIdAndAdd(ip):
                success += 1
            else:
                warnings += 1

            if hostname is not None and scanRemotePublicIdAndAdd(hostname):
                success += 1
            elif hostname:
                warnings += 1

            if identityFile != "##no-send-key##":
                if sendKeyToRemote(user, password, ip, identityFile):
                    success += 1
                else:
                    errors += 1

                if hostname is not None and sendKeyToRemote(user, password, hostname, identityFile):
                    success += 1
                elif hostname:
                    errors += 1

            i += 1

    Logger.info()
    Logger.info("End of process: ")
    Logger.info()

    Logger.success("Success: " + str(success))
    Logger.warning("Warnings: " + str(warnings))
    Logger.error("Errors: " + str(errors))

    if errors > 0:
        Logger.error()
        Logger.error("Errors have occurred, initialization is not guaranteed!")


def checkPrerequisites():
    prerequisitesList = ['sshpass', "ssh-keygen", "ssh-keyscan"]
    for prerequisite in prerequisitesList:
        try:
            shellCommand("[ $(which " + prerequisite + ") ]", False)
        except Exception as e:
            print(e)
            raise Exception("You must install this tool before: " + prerequisite)


def parseArguments():
    checkPrerequisites()

    parser = argparse.ArgumentParser(description=PGRM_DESC, formatter_class=RawTextHelpFormatter)

    parser.add_argument("-p", "--path",
                        help="file path to parse")

    knownArgs, unkArgs = parser.parse_known_args()

    if knownArgs.path:

        if os.path.isfile(knownArgs.path) is False:
            raise Exception("Not a file: " + knownArgs.path)

        processHostsFile(knownArgs.path)

    else:
        raise Exception("Invalid command. Try --help")


if __name__ == "__main__":

    try:
        parseArguments()
    except Exception as e:
        Logger.error()
        Logger.error(str(e.args[0]))
        Logger.error()

        raise e
        # exit(1)
