#!/usr/bin/env node

/**
 * Usage:
 *
 * $ sudo npm i -g ts-node typescript
 *
 * Allow to execute commands in specified directory.
 *
 * Usage:
 *
 *  $ cd ../dir/
 *  $ bcommand register "npm run compile-watch" "category"
 *  $ bcommand run all
 *  $ bcommand run category
 *
 * */

const os = require('os');
const fs = require('fs');
const path = require('path');

const COMMAND_LIST_PATH = path.join(os.homedir(), '.bcommand');

const TermStyle = {
    Reset: '\x1b[0m',
    Bright: '\x1b[1m',
    Dim: '\x1b[2m',
    Underscore: '\x1b[4m',
    Blink: '\x1b[5m',
    Reverse: '\x1b[7m',
    Hidden: '\x1b[8m',

    FgBlack: '\x1b[30m',
    FgRed: '\x1b[31m',
    FgGreen: '\x1b[32m',
    FgYellow: '\x1b[33m',
    FgBlue: '\x1b[34m',
    FgMagenta: '\x1b[35m',
    FgCyan: '\x1b[36m',
    FgWhite: '\x1b[37m',

    BgBlack: '\x1b[40m',
    BgRed: '\x1b[41m',
    BgGreen: '\x1b[42m',
    BgYellow: '\x1b[43m',
    BgBlue: '\x1b[44m',
    BgMagenta: '\x1b[45m',
    BgCyan: '\x1b[46m',
    BgWhite: '\x1b[47m',
};

const Utils = {
    log(message, data = false, termStyle = TermStyle.FgGreen) {
        console.log(termStyle + message + TermStyle.Reset);
        if (data) {
            console.log(data);
        }
    }
};

Utils.log('Bcommand !');
Utils.log('');

function Command(command, workingDir) {
    this.command = command;
    this.workingDir = workingDir;
}

function Actions() {
    this.commandList = [];
}

Actions.prototype.showHelp = () => {
    Utils.log('Register and execute commands');
};

Actions.prototype.registerCommand = function (command, workingDir) {
    this.commandList.push(new Command(command, workingDir));
};

Actions.prototype.displayCommands = function () {
    Utils.log('Registered commands: ');
    for (const com of this.commandList) {
        this.displayCommand(com);
    }
};

Actions.prototype.displayCommand = function (command) {
    Utils.log(command.workingDir + ' : ' + command.command);
};

Actions.prototype.persistCommands = function () {
    fs.writeFileSync(COMMAND_LIST_PATH, JSON.stringify(this.commandList));
};

Actions.prototype.exit = (code = 0) => {
    process.exit(code);
};

function ArgParser() {
    this.actions = new Actions();
}

ArgParser.prototype.processArgs = function (args) {
    const cleanArgs = this._cleanArgs(args);

    // console.log(cleanArgs);

    if (cleanArgs.indexOf('-h') !== -1) {
        this.actions.showHelp();
        this.actions.exit(0);
    }

    if (cleanArgs.indexOf('register') !== -1) {
        const command = cleanArgs[3];
        const workingDir = process.cwd();
        this.actions.registerCommand(command, workingDir);
        this.actions.persistCommands();
        this.actions.displayCommands();
        this.actions.exit(0);
    }
};

ArgParser.prototype._cleanArgs = function (arguments) {
    const res = [];
    for (const arg of arguments) {
        res.push(arg.trim());
    }
    return res;
};

const argParser = new ArgParser();
argParser.processArgs(process.argv);
