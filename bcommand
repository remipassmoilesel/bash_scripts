#!/usr/bin/env python3

#
# Usage:
#
# $ sudo npm i -g ts-node typescript
#
# Allow to execute commands in specified directory.
#
# Usage:
#
#  $ cd ../dir/
#  $ bcommand register "npm run compile-watch" "category"
#  $ bcommand run all
#  $ bcommand run category
#
#

import json
import os
import sys

home = os.path.expanduser("~")
COMMAND_LIST_PATH = os.path.join(home, '.bcommand')


class TermStyle():
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'
    ENDC = '\033[0m'


class Utils():
    @staticmethod
    def log(message='', data=None, termStyle=TermStyle.OKGREEN):
        print(termStyle + str(message) + TermStyle.ENDC)
        if data:
            print(data)


class Command():
    def __init__(self, command, workingDir):
        self.command = command
        self.workingDir = workingDir

    def toList(self):
        return [self.command, self.workingDir]

    @staticmethod
    def fromList(list):
        return Command(list[0], list[1])


Utils.log('Bcommand !')
Utils.log()


class ActionHandlers:
    def __init__(self):
        self.commandList = []

    def showHelp(self):
        Utils.log('Register and execute commands')

    def registerCommand(self, shellCommand, workingDir):
        self.commandList.append(Command(shellCommand, workingDir))

    def displayCommands(self):
        Utils.log('Registered commands: ')
        for com in self.commandList:
            self.displayCommand(com)

    def displayCommand(self, command):
        Utils.log(command.workingDir + ' : ' + command.command)

    def persistCommands(self):
        rawList = []
        for command in self.commandList:
            rawList.append(command.toList())

        with open(COMMAND_LIST_PATH, 'w') as outfile:
            json.dump(rawList, outfile)

    def loadCommands(self):
        try:
            with open(COMMAND_LIST_PATH, 'r') as infile:
                rawList = json.load(infile)
                self.commandList = []
                for item in rawList:
                    self.commandList.append(Command.fromList(item))

        except Exception as e:
            Utils.log('Preference file not found: ', e, TermStyle.WARNING)
            self.commandList = []

    def exit(self, code=0):
        exit(code)


class ArgParser:
    def __init__(self):
        self.actions = ActionHandlers()
        self.actions.loadCommands()

    def processArgs(self, args):
        cleanArgs = self.cleanArgs(args)

        # print(cleanArgs)
        
        if '-h' in cleanArgs:
            self.actions.showHelp()
            self.actions.exit()

        if len(cleanArgs) > 1 and cleanArgs[1] == 'register':
            shellCommand = cleanArgs[2]
            workingDir = os.getcwd()
            self.actions.registerCommand(shellCommand, workingDir)
            self.actions.persistCommands()
            self.actions.displayCommands()
            self.actions.exit()

        if len(cleanArgs) == 1:
            self.actions.displayCommands
            self.actions.exit(1)

    def cleanArgs(self, arguments):
        res = []
        for arg in arguments:
            res.append(arg.strip())
        return res


if __name__ == '__main__':
    argParser = ArgParser()
    argParser.processArgs(sys.argv)
