#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import json
import subprocess


def execAndGetOuput(command: str):
    result = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
    return result.stdout.decode('utf-8')


def getContainerIds() -> list:
    rawOutput = execAndGetOuput('docker ps -q')
    allIds = rawOutput.split('\n')
    return list(filter(lambda id: id is not None and len(id) > 0, allIds))


def getContainerDetails(containerIds: list) -> list:
    command = 'docker inspect ' + ' '.join(containerIds)
    result = execAndGetOuput(command)
    return json.loads(result)


def printContainerDetails(ids: list):

    colWidth = 55

    print()
    print('Container name'.ljust(colWidth)
          + 'Image'.ljust(colWidth)
          + 'Addresses'.ljust(colWidth)
          + 'Ports')
    print('-----'.ljust(colWidth)
          + '-----'.ljust(colWidth)
          + '-----'.ljust(colWidth)
          + '-----'.ljust(colWidth))
    print()

    containerDetails = getContainerDetails(ids)
    for container in containerDetails:
        name = container['Name']
        ports = container['NetworkSettings']['Ports']
        networks = container['NetworkSettings']['Networks']
        ipAddresses = list(map(lambda net: net['IPAddress'], networks.values()))
        image = container['Config']['Image']
        print(name.ljust(colWidth)
              + image.ljust(colWidth)
              + ', '.join(ipAddresses).ljust(colWidth)
              + ', '.join(ports.keys()))


if __name__ == "__main__":

    try:
        ids = getContainerIds()
        if ids is not None and len(ids) > 0:
            printContainerDetails(ids)
        else:
            print()
            print('No containers running !')
            print()
    except Exception as e:
        print(e)
        raise e
        # exit(1)
