#!/usr/bin/env python3
#

import fcntl
import json
import os
import random
import re
import sys
import time
from subprocess import *

home = os.path.expanduser("~")
TUNNEL_LIST_PATH = os.path.join(home, '.ssh-tunnels')
PREFIX_LEN = 20
ENCODING = 'utf-8'


class TermStyle():
    HEADER = '\033[95m'
    BLUE = '\033[94m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    RED = '\033[91m'
    CYAN = "\033[1;36m"
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'
    RESET = '\033[0m'


class ForwardType:
    LOCAL = 'local'
    REMOTE = 'remote'


class Utils():
    @staticmethod
    def log(message='', data=None, termStyle=TermStyle.GREEN):
        print(Utils.colorize(message, termStyle=termStyle))
        if data:
            print(data)

    @classmethod
    def error(self, message, data=None):
        Utils.log(message, data=data, termStyle=TermStyle.RED)

    @staticmethod
    def colorize(message, termStyle=TermStyle.GREEN):
        return termStyle + str(message) + TermStyle.RESET

    @staticmethod
    def normalize(str, maxLen):
        if len(str) > maxLen:
            start = len(str) - maxLen + 3
            str = '...' + str[start:len(str)]
        if len(str) < maxLen:
            blank = ''
            while len(blank) + len(str) < maxLen:
                blank += ' '
            str = blank + str
        return str

    @staticmethod
    def nonBlockReadStream(stream):
        fd = stream.fileno()
        fl = fcntl.fcntl(fd, fcntl.F_GETFL)
        fcntl.fcntl(fd, fcntl.F_SETFL, fl | os.O_NONBLOCK)
        try:
            return stream.read()
        except:
            return None

    @staticmethod
    def checkPrerequisites():
        process = Popen('type autossh', shell=True, stdout=PIPE, stderr=STDOUT)
        process.communicate()
        if process.returncode != 0:
            Utils.error('You must install autossh.')
            exit(1)


tunnelCounter = 0


class Tunnel():
    def __init__(self, tunnelName, host, sshPort, identityFile, forwardType, sourcePort, forwardHost, destinationPort):
        global tunnelCounter
        tunnelCounter = tunnelCounter + 1
        self.id = tunnelCounter
        self.color = random.choice([TermStyle.BLUE, TermStyle.CYAN, TermStyle.YELLOW, TermStyle.GREEN])
        self.tunnelName = tunnelName
        self.host = host
        self.sshPort = sshPort
        self.identityFile = identityFile
        self.forwardType = forwardType
        self.sourcePort = sourcePort
        self.forwardHost = forwardHost
        self.destinationPort = destinationPort
        self.process = None

    @staticmethod
    def fromList(list):
        return Tunnel(list[0], list[1], list[2], list[3], list[4], list[5], list[6], list[7])

    def toList(self):
        return [self.tunnelName,
                self.host,
                self.sshPort,
                self.identityFile,
                self.forwardType,
                self.sourcePort,
                self.forwardHost,
                self.destinationPort]

    def execute(self):
        command = self.getSshCommand()
        self.log('Starting tunnel: ' + self.tunnelName + ' with command: ' + command)
        self.process = Popen(command, shell=True, stderr=PIPE, stdout=PIPE)

    def getSshCommand(self):
        cmd = 'autossh -N'
        if self.sshPort is not None:
            cmd += ' -p ' + self.sshPort
        if len(self.identityFile) > 1:
            cmd += ' -i ' + self.identityFile
        if self.forwardType == ForwardType.LOCAL:
            cmd += ' -L'
        if self.forwardType == ForwardType.REMOTE:
            cmd += ' -R'
        cmd += ' ' + self.sourcePort + ':' + self.forwardHost + ':' + self.destinationPort
        cmd += ' ' + self.host
        return cmd

    def isAlive(self):
        return self.process is not None and self.process.poll() is None

    def kill(self):
        if self.isAlive():
            self.log('Tunnel was alive, killing it: ' + self.host)
            self.process.kill()
        else:
            self.log('Tunnel was not alive: ' + self.host)

    def printOutput(self):
        if self.process is None:
            return

        stdout = self.process.stdout
        if stdout is not None:
            out = Utils.nonBlockReadStream(stdout)
            if out is not None:
                for line in out.decode(ENCODING).rstrip().splitlines():
                    self.log(line, termStyle=self.color)

        stderr = self.process.stderr
        if stderr is not None:
            out = Utils.nonBlockReadStream(stderr)
            if out is not None:
                for line in out.decode(ENCODING).rstrip().splitlines():
                    self.log(line, termStyle=TermStyle.RED)

    def log(self, message, termStyle=TermStyle.GREEN):
        if len(message) > 0:
            prefix = self.getLogPrefix()
            Utils.log(Utils.colorize('[ ' + prefix + ' ]: ', termStyle=termStyle) + message)

    def getLogPrefix(self):
        return Utils.normalize(self.tunnelName, PREFIX_LEN)

    def printConfigurationOneLine(self):
        Utils.log('[' + str(self.id) + '] ' + self.tunnelName + ': '
                  + ' Host=' + self.host
                  + ' Forward type=' + self.forwardType
                  + ' Identity file=' + str(self.identityFile)
                  + ' SSH port=' + self.sshPort
                  + ' Source port=' + self.sourcePort
                  + ' Destination port=' + self.destinationPort
                  + ' Forward host=' + self.forwardHost)

    def printConfiguration(self):
        Utils.log('\t Tunnel name=' + self.host + ' \n'
                  + '\t Host=' + self.host + ' \n'
                  + '\t Forward type=' + str(self.forwardType) + ' \n'
                  + '\t Identity file=' + str(self.identityFile) + ' \n'
                  + '\t SSH port=' + self.sshPort + ' \n'
                  + '\t Source port=' + self.sourcePort + ' \n'
                  + '\t Destination port=' + self.destinationPort + ' \n'
                  + '\t Forward host=' + self.forwardHost)


class AddTunnelWizard():
    def start(self):
        self.printHeaders()

        tunnelName = self.askQuestion('Name of this tunnel ?', 'Test ssh tunnel')

        host = self.askQuestion('User and host (user@host) ?')
        sshPort = self.askQuestion('SSH port ?', '22', validRegex='[0-9]+')

        identityFile = self.askQuestion('Specify an identity file ?', validRegex='(.+)?')

        forwardType = self.askSelectableQuestion('Forward a local or remote port ?', [ForwardType.LOCAL,
                                                                                      ForwardType.REMOTE])
        sourcePort = self.askQuestion('Source port to forward ?', '8080', validRegex='[0-9]+')
        forwardHost = self.askQuestion('Forward host ?', 'localhost')
        destinationPort = self.askQuestion('Destination port to forward ?', '8080', validRegex='[0-9]+')

        tunnel = Tunnel(tunnelName, host, sshPort, identityFile, forwardType, sourcePort, forwardHost, destinationPort)

        if self.askConfirmation(tunnel) is True:
            return tunnel
        else:
            return None

    def askQuestion(self, text, defaultValue=None, validRegex='.+'):
        pattern = re.compile(validRegex)
        result = ''
        while pattern.match(result) is not True:
            Utils.log(text)
            try:
                prompt = '> '
                if defaultValue is not None:
                    prompt = '[' + str(defaultValue) + '] > '

                result = str(input(prompt)).strip()
                if len(result) == 0 and defaultValue is not None:
                    return str(defaultValue)
                elif pattern.match(result):
                    return result
                else:
                    Utils.error('Wrong input, please match regex: ' + validRegex)
            except (KeyboardInterrupt, SystemExit):
                exit(1)
            except:
                Utils.error('Wrong input, please match regex: ' + validRegex)

    def askSelectableQuestion(self, text, choices, defaultChoice=0):
        prompt = ''
        for idx, choice in enumerate(choices):
            prompt += str(idx) + ') ' + choice + ' '
            if idx == defaultChoice:
                prompt += '(default) \n'
            else:
                prompt += '\n'
        prompt += '> '

        result = ''
        while result not in choices:
            Utils.log(text)
            try:
                choice = input(prompt)
                if choice == '':
                    result = choices[defaultChoice]
                else:
                    result = choices[int(choice)]
                if result not in choices:
                    Utils.error('Wrong choice, please select one above ...')
            except (KeyboardInterrupt, SystemExit):
                exit(1)
            except:
                Utils.error('Please enter a value between 0 and ' + str(len(choices) - 1))

        return result

    def askConfirmation(self, tunnel):
        pattern = re.compile('(y|n)')
        result = ''
        while pattern.match(result) is not True:
            Utils.log('Tunnel configuration: ')
            tunnel.printConfiguration()
            try:
                prompt = 'Confirm ? (y/n) > '
                result = str(input(prompt)).strip()
                if pattern.match(result):
                    if result == 'y':
                        return True
                    else:
                        return False
                else:
                    Utils.error('Wrong input, please enter "y" or "n"')
            except (KeyboardInterrupt, SystemExit):
                exit(1)
            except:
                Utils.error('Wrong input, please enter "y" or "n"')

    def printHeaders(self):
        Utils.log()
        Utils.log('Interactive assistant.')
        Utils.log()


class ActionHandlers:
    def __init__(self):
        self.tunnelList = []

    def showHelp(self):
        Utils.log('Store and manage SSH tunnels')
        Utils.log('')
        Utils.log('Examples: ')
        Utils.log('\t$ ssh-tunnel help')
        Utils.log('\t$ ssh-tunnel add')
        Utils.log('\t$ ssh-tunnel show')
        Utils.log('\t$ ssh-tunnel run')
        Utils.log('\t$ ssh-tunnel run 0')
        Utils.log('\t$ ssh-tunnel run 0 1')
        Utils.log('\t$ ssh-tunnel remove 1')
        Utils.log('\t$ ssh-tunnel clean-all')

    def registerTunnel(self, tunnelName, host, sshPort, identityFile, remotePort, localPort):
        command = Tunnel(tunnelName, host, sshPort, identityFile, remotePort, localPort)
        self.tunnelList.append(command)

    def displayTunnels(self):
        if len(self.tunnelList) > 0:
            Utils.log('Registered tunnels: ')
            Utils.log()
            for i, tunn in enumerate(self.tunnelList):
                tunn.printConfigurationOneLine()
        else:
            Utils.log('No tunnel registered yet !')

    def persistTunnels(self):
        rawList = []
        for tunnel in self.tunnelList:
            rawList.append(tunnel.toList())

        with open(TUNNEL_LIST_PATH, 'w') as outfile:
            json.dump(rawList, outfile, indent=4, sort_keys=True)

    def loadTunnels(self):
        try:
            with open(TUNNEL_LIST_PATH, 'r') as infile:
                rawList = json.load(infile)
                self.tunnelList = []
                for item in rawList:
                    self.tunnelList.append(Tunnel.fromList(item))

        except Exception as e:
            Utils.log('Tunnel list file not found: ', e, TermStyle.YELLOW)
            self.tunnelList = []

    def cleanAllTunnels(self):
        self.tunnelList = []

    def cleanTunnels(self, tunnelId):
        tunn = self.getTunnelById(tunnelId)
        self.tunnelList.remove(tunn)

    def getTunnelById(self, tunnelId):
        for tunn in self.tunnelList:
            if tunn.id == tunnelId:
                return tunn
        return None

    def exit(self, code=0):
        keepAlive = self.isTunnelAlive()
        while keepAlive:
            try:
                keepAlive = self.isTunnelAlive()
                self.printTunnelsOutput()
                time.sleep(0.2)
            except (KeyboardInterrupt, SystemExit):
                Utils.log()
                Utils.log()
                Utils.log('Stopping tunnels ...', termStyle=TermStyle.YELLOW)
                Utils.log()
                for tunn in self.tunnelList:
                    tunn.kill()
        exit(code)

    def printTunnelsOutput(self):
        for tunn in self.tunnelList:
            tunn.printOutput()

    def launchTunnelsByIds(self, tunnelIds):
        for tunnId in tunnelIds:
            self.getTunnelById(int(tunnId)).execute()

    def executeAll(self):
        for tunn in self.tunnelList:
            tunn.execute()

    def isTunnelAlive(self):
        if len(self.tunnelList) == 0:
            return False
        for tun in self.tunnelList:
            if tun.isAlive():
                return True
        return False

    def addTunnelInteractive(self):
        wizard = AddTunnelWizard()
        tunnel = wizard.start()
        if tunnel is not None:
            self.tunnelList.append(tunnel)
            self.persistTunnels()
            return True
        else:
            return False


class ArgParser:
    def __init__(self):
        self.actions = ActionHandlers()
        self.actions.loadTunnels()

    def processArgs(self, args):
        cleanArgs = self.cleanArgs(args)

        # print(cleanArgs)

        if len(cleanArgs) < 2:
            self.actions.showHelp()
            self.actions.exit(1)

        if cleanArgs[1] == 'help':
            self.actions.showHelp()
            self.actions.exit()

        if cleanArgs[1] == 'show':
            self.actions.displayTunnels()
            self.actions.exit()

        if cleanArgs[1] == 'clean-all':
            self.actions.cleanAllTunnels()
            self.actions.persistTunnels()

            Utils.log('All tunnels cleaned !')
            Utils.log()

            self.actions.exit()

        if cleanArgs[1] == 'remove' and len(cleanArgs) > 2:

            tunnelIds = cleanArgs[2:]
            removed = []
            for tunnId in tunnelIds:
                tunn = self.actions.getTunnelById(int(tunnId))
                if tunn is None:
                    Utils.error('Tunnel not found: ' + tunnId)
                else:
                    removed.append(tunnId)
                    self.actions.cleanTunnels(int(tunnId))
            self.actions.persistTunnels()

            if len(removed) > 0:
                Utils.log('Tunnels cleaned: ' + str(removed))
                Utils.log()

                self.actions.exit()

            else:
                self.actions.exit(1)

        if cleanArgs[1] == 'run' and len(cleanArgs) == 2:

            Utils.log('Starting all tunnels')
            Utils.log()

            if len(self.actions.tunnelList) > 0:
                self.actions.executeAll()
                self.actions.exit()
            else:
                Utils.log('No tunnel to start', termStyle=TermStyle.YELLOW)
                self.actions.exit(1)

        if cleanArgs[1] == 'run' and len(cleanArgs) > 2:
            tunnelIds = cleanArgs[2:]
            Utils.log('Starting tunnels: ' + str(tunnelIds))
            Utils.log()

            self.actions.launchTunnelsByIds(tunnelIds)
            self.actions.exit()

        if cleanArgs[1] == 'add':
            res = self.actions.addTunnelInteractive()
            if res is True:
                self.actions.displayTunnels()
                self.actions.exit(0)
            else:
                self.actions.exit(1)

        Utils.error('Bad command.')
        Utils.log()
        self.actions.showHelp()
        self.actions.exit(1)

    def cleanArgs(self, arguments):
        res = []
        for arg in arguments:
            res.append(arg.strip())
        return res


if __name__ == '__main__':
    Utils.log('Bookmarked tunnels !')
    Utils.log()

    Utils.checkPrerequisites()

    argParser = ArgParser()
    argParser.processArgs(sys.argv)
