#!/usr/bin/python3
# encoding: utf-8

import argparse
import datetime
import json
import os
import shlex
import subprocess

DEBUG = False

dateOfCall = datetime.datetime.now().strftime("%Y-%m-%d-%H-%M")

scriptDir = os.path.dirname(os.path.abspath(__file__))
installationDir = scriptDir

logRoot = os.path.join(installationDir, "log/")
newLogName = os.path.join(logRoot, "installation_" + dateOfCall + ".txt");

packagesListPath = os.path.join(installationDir, "installation.json");

# JSON block names
beforeCommandsId = "before_commands"
afterCommandsId = "after_commands"
toInstallId = "to_install"
toUninstallId = "to_uninstall"

readableNames = {
    beforeCommandsId: "First commands",
    toInstallId: "Packages to install",
    toUninstallId: "Packages to uninstall",
    afterCommandsId: "Final commands",
}

programDescription = '''
Automation script usefull to prepare Debian based systems.
Install or uninstall packages, and execute various commands.

Packages and commands are saved in: ''' + packagesListPath


def log(text=os.linesep):
    print(text)

    if os.path.isdir(logRoot) == False:
        os.makedirs(logRoot)

    with open(newLogName, "a+") as outfile:
        outfile.write(text + os.linesep)


def logTitle(text):
    dashLine = ""
    for c in text:
        dashLine += "-"

    log()
    log(text)
    log(dashLine)
    log()


def executeAndLog(commandStr):
    with open(newLogName, "a+") as outfile:
        if DEBUG:
            print(commandStr)
        else:
            subprocess.call(shlex.split(commandStr), stdout=outfile, stderr=outfile)


def parseInstallationFile():
    return json.load(open(packagesListPath))


def parseArguments():
    parser = argparse.ArgumentParser(description=programDescription)

    parser.add_argument("-i", "--install",
                        action="store_true",
                        help="install packages and run commands")

    parser.add_argument("-e", "--edit",
                        action="store_true",
                        help="edit list of commands and packages")

    parser.add_argument("-ai", "--append-packet-to-install",
                        action="store_true",
                        help="add a package to install")

    parser.add_argument("-au", "--append-packet-to-uninstall",
                        action="store_true",
                        help="add a package to uninstall")

    parser.add_argument("-d", "--display",
                        action="store_true",
                        help="print list of packages and commands")

    knownArgs, otherArgs = parser.parse_known_args()

    if knownArgs.edit:
        subprocess.call(shlex.split("vim " + packagesListPath))

    elif knownArgs.display:
        try:
            data = parseInstallationFile()
        except Exception as error:
            raise Exception("Invalid data file: " + str(error))

        for groupId, label in readableNames.items():
            log('\n' + label + ":\n")
            i = 0
            for package in data[groupId]:
                log("\t#" + str(i) + ": " + package)
                i += 1

    elif knownArgs.append_packet_to_install or knownArgs.append_packet_to_uninstall:

        if (len(otherArgs) < 1):
            raise Exception("You must provide a package name")

        try:
            data = parseInstallationFile()
        except Exception as error:
            raise Exception("Unable to parse data file: " + str(error))

        packageListId = ''
        if knownArgs.append_packet_to_install:
            packageListId = toInstallId
        if knownArgs.append_packet_to_uninstall:
            packageListId = toUninstallId

        for p in otherArgs:
            data[packageListId].append(p)

        try:
            jsonfile = open(packagesListPath, "w")
            jsonfile.write(json.dumps(data, sort_keys=True, indent=4, separators=(',', ': ')))
        except:
            raise ("Unable to write: " + packagesListPath)

        log("Package added.")


    elif knownArgs.install:

        try:
            data = parseInstallationFile()
        except Exception as e:
            raise Exception("Invalid data file: " + str(e))

        commandHeader = "\t#"
        logTitle("Executing first commands: ")
        for i, c in enumerate(data[beforeCommandsId]):
            log(commandHeader + str(i) + " " + c)
            executeAndLog(c)

        logTitle("Removing packages: ")
        for i, p in enumerate(data[toUninstallId]):
            log(commandHeader + str(i) + " " + p)
            executeAndLog("sudo apt-get -y remove --purge " + p)

        logTitle("Installing packages: ")
        for i, p in enumerate(data[toInstallId]):
            log(commandHeader + str(i) + " " + p)
            executeAndLog("sudo apt-get -y install " + p)

        logTitle("Executing final commands: ")
        for i, c in enumerate(data[afterCommandsId]):
            log(commandHeader + str(i) + " " + c)
            executeAndLog(c)

        log("\n\nEnd of installation. Log available at: " + newLogName)

    else:
        print("You must specify a command")
        parser.print_help()
        raise Exception('Invalid command')


if __name__ == "__main__":

    try:
        parseArguments()
    except Exception as e:
        print(str(e))

        if DEBUG:
            raise e

        exit(1)
