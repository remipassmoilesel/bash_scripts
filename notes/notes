#!/usr/bin/env python3
# encoding: utf-8

import argparse
import datetime
import os
import re
import shutil
import subprocess


class Configuration:
    DEBUG = False

    NUMBER_OF_LINE_ON_LIST = 3
    GRAPHICAL_EDITOR = "xdg-open"
    CLI_EDITOR = "vim"

    NOTE_REPO_NAME = "repository"
    NOTE_REPO_PATH = os.path.join(os.path.dirname(os.path.realpath(__file__)), NOTE_REPO_NAME)

    NOTE_NAME_PREFIX = "note_"
    NOTE_EXTENSION = "md"
    ENCRYPTED_NOTE_EXTENSION = ".gpg"

    TEMPLATE_NAME = ".template.md"
    TEMPLATE_PATH = os.path.join(NOTE_REPO_PATH, TEMPLATE_NAME)

    PGRM_DESC = '''
Small utility to save notes.
Notes are saved in: ''' + NOTE_REPO_PATH


class Note:

    def __init__(self):
        self.id = -1
        self.path = ''
        self.title = ''
        self.content = []

    @staticmethod
    def getNoteFromPath(notePath: str, id: int):
        with open(notePath, "r") as file:
            fileLines = file.readlines()

            note = Note()
            note.id = id
            note.path = notePath
            note.title = fileLines[0]
            note.content = fileLines[1:]

            return note

    def getContentMatching(self, regex):
        return list(filter(lambda line: re.search(regex, line, re.IGNORECASE), self.content))

    def display(self, lineMax=None, regex=None):
        Logger.printColor("@ Number: " + str(self.id), Colors.GREEN)
        Logger.info("@ Path: " + self.path)
        Logger.info("")

        Logger.printColor(self.title, Colors.BLUE + Colors.UNDERLINE)
        Logger.info()

        notesLines = []
        if regex:
            notesLines = self.getContentMatching(regex)
        else:
            notesLines = self.content

        if lineMax:
            notesLines = notesLines[:lineMax]

        if notesLines > 0:
            for line in notesLines:
                print(line)
        else:
            Logger.warning("** Note is empty **")

        Logger.info("")

    def displayCompact(self):
        Logger.info("@ ID: " + str(self.id) + "@ Title: " + self.title)

    def edit(self, useGraphicalEditor=False):
        """
        Edit a note, with graphical or non graphical editor
        """
        editor = Configuration.GRAPHICAL_EDITOR if useGraphicalEditor is True else Configuration.CLI_EDITOR
        subprocess.call(editor + " " + self.path, shell=True)

    def commit(self):
        commitMessage = "Note " + str(os.path.split(self.path)[:-1]) + " updated"
        subprocess.call("git commit -m " + commitMessage + " " + self.path, shell=True)

    def encryptGpg(self):
        encryptedNotePath = self.clearToEncryptedNotePath()
        encryptNoteCommand = "gpg --yes --armor --output " \
                             + encryptedNotePath \
                             + " --symmetric " \
                             + self.path + " && sync"

        returnCode = subprocess.call(encryptNoteCommand, shell=True)
        returnCode += subprocess.call("shred -u " + self.path + " && sync", shell=True)

        if returnCode is 0:
            self.path = encryptedNotePath
        else:
            raise Exception("/!\ Unable to encrypt note: " + self.path)

    def decryptGpg(self):
        clearNotePath = self.encryptedToClearNotePath()
        decryptCommand = "gpg --yes --decrypt --output " + clearNotePath + " " + self.path + " && sync"
        returnCode = subprocess.call(decryptCommand, shell=True)

        if returnCode is 0:
            self.path = clearNotePath
        else:
            raise Exception("/!\ Unable to encrypt note: " + self.path)

    def clearToEncryptedNotePath(self):
        return self.path + Configuration.ENCRYPTED_NOTE_EXTENSION

    def encryptedToClearNotePath(self):
        return self.path[:-len(Configuration.ENCRYPTED_NOTE_EXTENSION)]


class Colors:
    PURPLE = '\033[95m'
    BLUE = '\033[94m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    RED = '\033[91m'
    ENDC = '\033[0m'
    UNDERLINE = '\033[4m'


class Logger:

    @staticmethod
    def header(line=""):
        Logger.printColor(line, Colors.UNDERLINE)

    @staticmethod
    def success(line=""):
        Logger.printColor(line, Colors.GREEN)

    @staticmethod
    def info(line=""):
        Logger.printColor(line)

    @staticmethod
    def warning(line=""):
        Logger.printColor(line, Colors.YELLOW)

    @staticmethod
    def error(line=""):
        Logger.printColor(line, Colors.RED)

    @staticmethod
    def printColor(line="", color=Colors.ENDC):
        print(color + str(line) + Colors.ENDC)

    @staticmethod
    def debug(data):
        if Configuration.DEBUG:
            Logger.printColor('Debug: ', Colors.YELLOW)
            print(data)


class NotesContainer:

    def __init__(self):
        self.notePaths = []
        self.noteCache = []

    def resolveNotePath(self, query: str, includeEncrypted=False):
        """
        Try to resolve a note name regardless it is a note name, partial name or number.
        Return None if nothing is found
        """
        # arg is a full path
        if os.path.isfile(query) is True:
            return query

        # arg is a note number
        if re.search("^[0-9]*$", query):
            notes = self.getNotePaths(includeEncrypted)
            if int(query) < len(notes):
                return notes[int(query)]

        # arg is a relative path or a partial name
        if len(query.split(os.sep)) < 2:

            # relative path: return absolute path
            notePath = os.path.join(Configuration.NOTE_REPO_PATH, query)
            if os.path.isfile(notePath):
                return notePath

            # partial name: search
            for path in self.getNotePaths(includeEncrypted):
                if re.search(query, path, re.IGNORECASE) is not None:
                    return path

        return None

    def getNotePaths(self, includeEncrypted=False):
        """
        Return an ordered list of note paths
        """

        if self.notePaths is None:

            # list files from directory
            output = []
            dirList = os.listdir(Configuration.NOTE_REPO_PATH)

            # remove uneeded files
            for fname in dirList:
                if fname != "." and fname != ".." and fname != Configuration.TEMPLATE_NAME:
                    if (includeEncrypted and fname.endswith(Configuration.ENCRYPTED_NOTE_EXTENSION)) \
                            or fname.endswith(Configuration.NOTE_EXTENSION):
                        output.append(os.path.join(Configuration.NOTE_REPO_PATH, fname))

            output.sort()

            # return result
            return output
        else:
            return self.notePaths

    def getNote(self):

    def createNewNote(self, newNoteName: str) -> Note:
        newNotePath = os.path.join(Configuration.NOTE_REPO_PATH, newNoteName)
        shutil.copy(Configuration.TEMPLATE_PATH, newNotePath)

        noteId = self.getNoteIdFromPath(newNotePath)
        note = Note.getNoteFromPath(newNotePath, noteId)

        return note

    def getNoteFromPath(self, notePath):
        noteId = self.getNoteIdFromPath(notePath)
        return Note.getNoteFromPath(notePath, noteId)

    def getNoteIdFromPath(self, notePath) -> int:
        return self.notePaths.index(notePath)

    def getNewNoteName(self, suffix) -> str:
        today = datetime.datetime.now()
        newNoteName = Configuration.NOTE_NAME_PREFIX + today.strftime('%Y-%m-%d_%H-%M-%S')
        if suffix is not None:
            newNoteName += "_" + suffix
        newNoteName += "." + Configuration.NOTE_EXTENSION
        return newNoteName

    def checkNoteRepository(self):
        """
        Check if repository and templates exist, or try to create them
        """
        if os.path.isdir(Configuration.NOTE_REPO_PATH) is False:
            os.makedirs(Configuration.NOTE_REPO_PATH)
            Logger.info("Note repository was created here: " + Configuration.NOTE_REPO_PATH)

        # create note template
        if os.path.isfile(Configuration.TEMPLATE_PATH) is False:
            with open(Configuration.TEMPLATE_PATH, 'a') as file:
                file.close()


def buildSearchRegexArray(keywords):
    regexPartsArray = []
    for word in keywords:
        wordWithoutSpecialChars = re.sub("[^a-z0-9-]", ".?", word, re.IGNORECASE)
        regexPartsArray.append(wordWithoutSpecialChars)

    separatorPattern = "[-_\s]+"
    regexArray = [
        "^(" + "|".join(regexPartsArray) + ")",
        "(" + "|".join(regexPartsArray) + ")$",
        "(" + separatorPattern + "|".join(regexPartsArray) + separatorPattern + ")",
    ]
    return regexArray


class CliHandlers:

    def __init__(self):
        self.notes = NotesContainer()

    def createNewNote(self, noteSuffix, useGraphicalEditor, encrypt):

        noteName = self.notes.getNewNoteName(noteSuffix)
        Logger.info("Note have been created: " + noteName)

        note: Note = self.notes.createNewNote(noteName)
        note.edit(useGraphicalEditor)

        if encrypt is True:
            note.encryptGpg()

        note.commit()

    def editNote(self, noteIdentifier, graphicalEditor, encrypt):

        notePath = self.notes.resolveNotePath(noteIdentifier, encrypt)
        if notePath is None:
            raise Exception("Unable to find note: " + noteIdentifier)

        note = self.notes.getNoteFromPath(notePath)

        if encrypt is True:
            note.decryptGpg()

        note.edit()

        if encrypt is True:
            note.encryptGpg()

    def editTemplate(self, graphicalEditor):
        Note.getNoteFromPath(Configuration.TEMPLATE_PATH).edit(graphicalEditor)

    def listNotes(self):

        notePaths = self.notes.getNotePaths()
        if len(notePaths) < 1:
            raise Exception("No notes available in: " + Configuration.NOTE_REPO_PATH)

        for index, notePath in notePaths:
            note = Note.getNoteFromPath(notePath, index)
            note.displayCompact()

    def displayNote(self, noteIdentifier):

        notePath = self.notes.resolveNotePath(noteIdentifier, encrypt)
        if notePath is None:
            raise Exception("Unable to find note: " + noteIdentifier)

        note = self.notes.getNoteFromPath(notePath)
        note.display()

    def displayAll(self):

        Logger.info("Notes from directory: " + Configuration.NOTE_REPO_PATH)
        Logger.info()

        notePaths = self.notes.getNotePaths()

        for index, notePath in notePaths:
            note = Note.getNoteFromPath(notePath, index)
            note.displayCompact()

    def searchNote(self, keywords):

        if len(keywords) < 1:
            raise Exception("You must specify keywords.")

        Logger.info("Notes from directory: " + Configuration.NOTE_REPO_PATH)
        Logger.info()

        regexArray = buildSearchRegexArray(keywords)
        someWhereFound = False

        # TODO: refactor search
        for path in listNotePaths():
            for line in getLinesFromNote(path):
                noteMatch = False
                for regex in regexArray:
                    matchLine = re.search(regex, line, re.IGNORECASE)
                    if matchLine:
                        displayNote(path, Configuration.NUMBER_OF_LINE_ON_LIST, regex)
                        noteMatch = True
                        someWhereFound = True
                        break
                if noteMatch:
                    break

        if not someWhereFound:
            raise Exception("Nothing found: " + ", ".join(keywords))


def parseArguments():
    # parse arguments
    parser = argparse.ArgumentParser(description=Configuration.PGRM_DESC)

    parser.add_argument("-k", "--encrypt",
                        action="store_true",
                        help="encrypt with gpg (symetric) after edit")

    parser.add_argument("-n", "--newnote",
                        action="store_true",
                        help="create a new note")

    parser.add_argument("-e", "--editnote",
                        action="store_true",
                        help="edit exisiting note")

    parser.add_argument("-s", "--search",
                        action="store_true",
                        help="search in all notes")

    parser.add_argument("-t", "--edittemplate",
                        action="store_true",
                        help="edit template")

    parser.add_argument("-l", "--list",
                        action="store_true",
                        help="list all notes")

    parser.add_argument("-d", "--display",
                        action="store_true",
                        help="display a note")

    parser.add_argument("-a", "--displayall",
                        action="store_true",
                        help="display all notes")

    parser.add_argument("-g", "--graphicaleditor",
                        action="store_true",
                        help="use graphical editor")

    knownArgs, unknownArgs = parser.parse_known_args()

    cliHandlers = CliHandlers()

    if knownArgs.newnote:

        noteSuffix = unknownArgs[0] if len(unknownArgs) > 0 else None
        cliHandlers.createNewNote(noteSuffix, knownArgs.graphicaleditor, knownArgs.encrypt)

    elif knownArgs.editnote:

        if len(unknownArgs) != 1:
            raise Exception("You must specify a name, a partial name or a number.")

        noteIdentifier = unknownArgs[0]
        cliHandlers.editNote(noteIdentifier, knownArgs.graphicaleditor, knownArgs.encrypt)

    elif knownArgs.edittemplate:

        cliHandlers.editTemplate(knownArgs.graphicaleditor)

    elif knownArgs.list:

        cliHandlers.listNotes()

    elif knownArgs.display:

        if len(unknownArgs) != 1:
            raise Exception("You must specify a name, a partial name or a number.")

        noteIdentifier = unknownArgs[0]
        cliHandlers.displayNote(noteIdentifier)

    elif knownArgs.displayall:

        cliHandlers.displayAll()

    elif knownArgs.search:

        keywords = unknownArgs
        cliHandlers.searchNote(keywords)

    else:
        Exception("Bad command, please try --help")


if __name__ == "__main__":

    try:
        parseArguments()
    except Exception as e:
        Logger.error()
        Logger.error(str(e.args[0]))
        Logger.error()

        if Configuration.DEBUG:
            raise e

        exit(1)
