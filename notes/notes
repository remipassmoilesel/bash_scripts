#!/usr/bin/env python3
# encoding: utf-8

import argparse
import datetime
import os
import re
import shutil
import subprocess

# TODO: replace all prints by logger


class Configuration:

    DEBUG = False

    NUMBER_OF_LINE_ON_LIST = 3
    GRAPHICAL_EDITOR = "xdg-open"
    CLI_EDITOR = "vim"

    NOTE_REPO_NAME = "repository"
    NOTE_REPO_PATH = os.path.join(os.path.dirname(os.path.realpath(__file__)), NOTE_REPO_NAME)

    NOTE_NAME_PREFIX = "note_"
    NOTE_EXTENSION = "md"
    ENCRYPTED_NOTE_EXTENSION = "gpg"

    TEMPLATE_NAME = ".template.md"
    TEMPLATE_PATH = os.path.join(NOTE_REPO_PATH, TEMPLATE_NAME)

    PGRM_DESC = '''
Small utility to save notes.
Notes are saved in: ''' + NOTE_REPO_PATH


class Colors:
    PURPLE = '\033[95m'
    BLUE = '\033[94m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    RED = '\033[91m'
    ENDC = '\033[0m'
    UNDERLINE = '\033[4m'

class Logger:

    @staticmethod
    def header(line=""):
        Logger.printColor(line, Colors.UNDERLINE)

    @staticmethod
    def success(line=""):
        Logger.printColor(line, Colors.GREEN)

    @staticmethod
    def info(line=""):
        Logger.printColor(line)

    @staticmethod
    def warning(line=""):
        Logger.printColor(line, Colors.YELLOW)

    @staticmethod
    def error(line=""):
        Logger.printColor(line, Colors.RED)

    @staticmethod
    def printColor(line="", color=Colors.ENDC):
        print(color + str(line) + Colors.ENDC)

    @staticmethod
    def debug(data):
        if Configuration.DEBUG:
            Logger.printColor('Debug: ', Colors.YELLOW)
            print(data)


def displayNote(notePath, lineMax=None, regex=None):
    """
    Display a note, without first blank lines
    """
    print(Colors.GREEN + "@ Number: " + str(listNotePaths().index(notePath)) + Colors.ENDC)
    print("@ Name: " + notePath.split(os.sep)[-1])
    print("@ Path: " + notePath)
    print("")

    i = 0
    firstPrinted = False
    for line in getLinesFromNote(notePath):

        # avoid printing first empty lines
        if firstPrinted is False and re.search("[a-z0-9]+", line, re.IGNORECASE) is None:
            continue
        else:
            firstPrinted = True

        # first line; print in color. [0:-1] print without end of line
        if i == 0:
            print(Colors.BLUE + Colors.UNDERLINE + line[0:-1] + Colors.ENDC)
            print("")
            i +=1

        # otherwise print normally, but without end of line
        else:
            if regex == None:
                print(line[0:-1])
                i += 1
            # if regex is provided, show only matching lines
            else:
                match = re.search(regex, line, re.IGNORECASE)
                if match != None:
                    line = re.sub(regex, Colors.YELLOW + match.group(1) + Colors.ENDC, line, re.IGNORECASE)
                    print(line[0:-1])
                    i += 1

        if lineMax != None and i > lineMax:
            break

    if i == 0:
        print("** Note is empty **")

    print("")


def resolveNoteName(data, includeEncrypted = False):
    """
    Try to resolve a note name regardless it is a note name, partial name or number.
    Return None if nothing is found
    """
    # arg is a full path
    if os.path.isfile(data) is True:
        return data

    # arg is a note number
    if re.search("^[0-9]*$", data):
        notes = listNotePaths(includeEncrypted)
        if int(data) < len(notes):
            return notes[int(data)]

    # arg is a relative path or a partial name
    if len(data.split(os.sep)) < 2:

        # relative path: return absolute path
        notePath = os.path.join(Configuration.NOTE_REPO_PATH, data)
        if os.path.isfile(notePath):
            return notePath

        # partial name: search
        for path in listNotePaths(includeEncrypted):
            if re.search(data, path, re.IGNORECASE) is not None:
                return path

    return None


def getLinesFromNote(notePath):
    with open(notePath, "r") as file:
        return file.readlines()


def listNotePaths(includeEncrypted=False):
    """
    Return an ordered list of note paths
    """

    # list files from directory
    output = []
    dirList = os.listdir(Configuration.NOTE_REPO_PATH)

    # remove uneeded files
    for fname in dirList:
        if fname != "." and fname != ".." and fname != Configuration.TEMPLATE_NAME:
            if (includeEncrypted and fname.endswith(Configuration.ENCRYPTED_NOTE_EXTENSION)) \
                    or fname.endswith(Configuration.NOTE_EXTENSION):
                output.append(os.path.join(Configuration.NOTE_REPO_PATH, fname))

    output.sort()

    # return result
    return output


def editNote(notePath, useGraphicalEditor=False):
    """
    Edit a note, with graphical or non graphical editor
    """
    # choose editor
    editor = Configuration.GRAPHICAL_EDITOR if useGraphicalEditor == True else Configuration.CLI_EDITOR

    # call editor
    subprocess.call(editor + " " + notePath, shell=True)


def createNewNote(suffix=None):

    today = datetime.datetime.now()
    newNoteName = Configuration.NOTE_NAME_PREFIX + today.strftime('%Y-%m-%d_%H-%M-%S')
    if suffix != None:
        newNoteName += "_" + suffix
    newNoteName += "." + Configuration.NOTE_EXTENSION

    newNotePath = os.path.join(Configuration.NOTE_REPO_PATH, newNoteName)

    # create file from template
    shutil.copy(Configuration.TEMPLATE_PATH, newNotePath)

    # return full path
    return newNotePath


def checkNoteRepository():
    """
    Check if repository and templates exist, or try to create them
    """

    if os.path.isdir(Configuration.NOTE_REPO_PATH) == False:
        os.makedirs(Configuration.NOTE_REPO_PATH)
        print("Note repository was created here: " + Configuration.NOTE_REPO_PATH)

    # create note template
    if os.path.isfile(Configuration.TEMPLATE_PATH) == False:
        with open(Configuration.TEMPLATE_PATH, 'a') as file:
            file.close()


def encryptGpg(noteName):
    code = subprocess.call("gpg --yes --armor --output " + clearToEncryptedNoteName(noteName)
                           + " --symmetric " + noteName + " && sync", shell=True)

    code += subprocess.call("shred -u " + noteName + " && sync", shell=True)
    return code


def decryptGpg(noteName):
    return subprocess.call("gpg --yes --decrypt --output " +
                           encryptedToClearNoteName(noteName) + " " + noteName + " && sync", shell=True)


def clearToEncryptedNoteName(noteName):
    return noteName + "." + Configuration.ENCRYPTED_NOTE_EXTENSION


def encryptedToClearNoteName(noteName):
    return noteName[:-4]


def buildSearchRegexArray(keywords):

    regexPartsArray = []
    for word in keywords:
        wordWithoutSpecialChars = re.sub("[^a-z0-9-]", ".?", word, re.IGNORECASE)
        regexPartsArray.append(wordWithoutSpecialChars)

    separatorPattern = "[-_\s]+"
    regexArray = [
        "^(" + "|".join(regexPartsArray) + ")$",
        "^(" + ("|").join(regexPartsArray) + separatorPattern + ")",
        "(" + separatorPattern + ("|").join(regexPartsArray) + ")" + "$",
        "(" + separatorPattern +("|").join(regexPartsArray) + separatorPattern + ")",
    ]
    return regexArray


def parseArguments():

    # parse arguments
    parser = argparse.ArgumentParser(description=Configuration.PGRM_DESC)

    parser.add_argument("-k", "--encrypt",
                        action="store_true",
                        help="encrypt with gpg (symetric) after edit")

    parser.add_argument("-n", "--newnote",
                        action="store_true",
                        help="create a new note")

    parser.add_argument("-e", "--editnote",
                        action="store_true",
                        help="edit exisiting note")

    parser.add_argument("-s", "--search",
                        action="store_true",
                        help="search in all notes")

    parser.add_argument("-t", "--edittemplate",
                        action="store_true",
                        help="edit template")

    parser.add_argument("-l", "--list",
                        action="store_true",
                        help="list all notes")

    parser.add_argument("-d", "--display",
                        action="store_true",
                        help="display a note")

    parser.add_argument("-a", "--displayall",
                        action="store_true",
                        help="display all notes")

    parser.add_argument("-g", "--graphicaleditor",
                        action="store_true",
                        help="use graphical editor")

    knownArgs, unknownArgs = parser.parse_known_args()

    if knownArgs.newnote:

        if len(unknownArgs) > 0:
            noteName = createNewNote(unknownArgs[0])
        else:
            noteName = createNewNote()

        print("This note have been created: " + noteName)

        editNote(noteName, knownArgs.graphicaleditor)

        if knownArgs.encrypt is True:
            code = encryptGpg(noteName)
            if code != 0:
                raise Exception("/!\ Warning: Error while encrypting note " + noteName)

    elif knownArgs.editnote:

        if len(unknownArgs) != 1:
            raise Exception("You must specify a name, a partial name or a number.")

        noteIdentifier = unknownArgs[0]
        notePath = resolveNoteName(noteIdentifier, knownArgs.encrypt)

        if notePath is None:
            raise Exception(1, "Unable to find note: " + noteIdentifier)

        if knownArgs.encrypt is True:
            code = decryptGpg(notePath)
            notePath = encryptedToClearNoteName(notePath)
            if code != 0:
                raise Exception("/!\ Unable to decrypt note: " + notePath)

        editNote(notePath, knownArgs.graphicaleditor)

        if knownArgs.encrypt is True:
            code = encryptGpg(notePath)
            if code != 0:
                raise Exception("/!\ Warning: Error while encrypting note " + notePath)

    elif knownArgs.edittemplate:

        editNote(Configuration.TEMPLATE_PATH, knownArgs.graphical_editor)

    elif knownArgs.list:

        notePaths = listNotePaths()
        if len(notePaths) < 1:
            raise Exception("No notes available in: " + Configuration.NOTE_REPO_PATH)

        for noteName in notePaths:
            displayNote(noteName, Configuration.NUMBER_OF_LINE_ON_LIST)

    elif knownArgs.display:

        if len(unknownArgs) != 1:
            raise Exception("You must specify a name, a partial name or a number.")

        noteIdentifier = unknownArgs[0]
        notePath = resolveNoteName(noteIdentifier)

        # not found
        if notePath is None:
            raise Exception("Unable to found note: " + noteIdentifier)

        displayNote(notePath)

    elif knownArgs.displayall:

        print("Notes from directory: " + Configuration.NOTE_REPO_PATH)
        print("")

        for path in listNotePaths():
            displayNote(path)

    elif knownArgs.search:

        keywords = unknownArgs
        if len(keywords) < 1:
            raise Exception("You must specify keywords.")

        print("Notes from directory: " + Configuration.NOTE_REPO_PATH)
        print("")

        regexArray = buildSearchRegexArray(keywords)
        someWhereFound = False

        # TODO: refactor search
        for path in listNotePaths():
            for line in getLinesFromNote(path):
                noteMatch = False
                for regex in regexArray:
                    matchLine = re.search(regex, line, re.IGNORECASE)
                    if matchLine:
                        displayNote(path, Configuration.NUMBER_OF_LINE_ON_LIST, regex)
                        noteMatch = True
                        someWhereFound = True
                        break
                if noteMatch:
                    break

        if not someWhereFound:
            raise Exception("Nothing found: " + ", ".join(keywords))

    else:
        Exception("Bad command, please try --help")


if __name__ == "__main__":

    try:
        parseArguments()
    except Exception as e:
        Logger.error(str(e))

        if Configuration.DEBUG:
            raise e

        exit(1)

